using System.Reflection;
using Microsoft.CodeAnalysis.CSharp;
using NetDaemon.HassModel.CodeGenerator.CodeGeneration;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace NetDaemon.HassModel.CodeGenerator;

internal static class Generator
{
    /// <summary>
    /// Generates all Types from Entity and Services metadata
    /// </summary>
    public static MemberDeclarationSyntax[] GenerateTypes(
        IReadOnlyCollection<EntityDomainMetadata> entityDomains,
        IReadOnlyCollection<HassServiceDomain> services)
    {
        var orderedServiceDomains = services.OrderBy(x => x.Domain).ToArray();

        var helpers = HelpersGenerator.Generate(entityDomains, orderedServiceDomains);
        var entityClasses = EntitiesGenerator.Generate(entityDomains);
        var serviceClasses = ServicesGenerator.Generate(orderedServiceDomains);
        var extensionMethodClasses = ExtensionMethodsGenerator.Generate(orderedServiceDomains, entityDomains);

        return new[] { helpers, entityClasses, serviceClasses, extensionMethodClasses }.SelectMany(x => x).ToArray();
    }

    public static CompilationUnitSyntax BuildCompilationUnit(string namespaceName, params MemberDeclarationSyntax[] generatedTypes)
    {
        return CompilationUnit()
            .AddUsings(UsingNamespaces.Select(u => UsingDirective(ParseName(u))).ToArray())
            .WithLeadingTrivia(GetFileHeader()
                .Append(Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true))))
            .AddMembers(FileScopedNamespaceDeclaration(ParseName(namespaceName)))
            .AddMembers(generatedTypes)
            .NormalizeWhitespace();
    }


    private static SyntaxTrivia[] GetFileHeader()
    {
        string headerText = @$"
        //------------------------------------------------------------------------------
        // <auto-generated>
        // Generated using NetDaemon CodeGenerator nd-codegen v{VersionHelper.GeneratorVersion}
        //   At: {DateTime.Now:O}
        //
        // *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
        // You can use following command to keep it up to date with the latest version:
        //   dotnet tool update NetDaemon.HassModel.CodeGen
        //
        // To update this file with latest entities run this command in your project directory:
        //   dotnet tool run nd-codegen
        //
        // In the template projects we provided a convenience powershell script that will update
        // the codegen and nugets to latest versions update_all_dependencies.ps1.
        //
        // For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
        // For more information about NetDaemon: https://netdaemon.xyz/
        // </auto-generated>
        //------------------------------------------------------------------------------";

        var lines = headerText.Split('\n', StringSplitOptions.RemoveEmptyEntries | StringSplitOptions.TrimEntries);

        SyntaxTrivia[] header = lines.SelectMany(l => new[] { Comment(l), LineFeed }).ToArray();
        return header;
    }
}
